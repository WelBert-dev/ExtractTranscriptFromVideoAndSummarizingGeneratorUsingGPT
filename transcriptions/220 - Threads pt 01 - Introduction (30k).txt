 A galera que vem até o nosso canal, nessa aula nós vamos começar a falar de um dos tópicos mais avançados de Java, que é a parte de Treads. Então, criamos um novo pacote ZZ, nós estamos no F, Treads, e vamos criar aqui um pacote TEST. Legal, vamos começar bem simples com Tread, TEST01. Bom, então o que é uma Tread? Tread tem duas definições, pode ser um objeto, porque nós temos uma classe chamada Tread, onde nós podemos criar literalmente um objeto do tipo Tread, e nós temos um processo, uma linha de execução. Você tem diversos tipos de Treads, se você apertar contra o TTS que você vê aqui na parte de performance, você vê que o próprio seu personal vai ter várias Treads sendo executadas, ou seja, são como se fosse trabalhadores que dividem a carga de tarefas de um determinado processo. Então você tem 215 processos e 3 mil Treads aqui subindo e descendo, para cada um meio que dividido entre esses processos. A parte de divisão não importa para a gente, e realmente não tem como a gente dizer. Bom, basicamente quando você está trabalhando com Treads, pouca coisa é garantida, a JVM no caso do Java vai tomar conta da execução dessas Treads, e na maioria dos casos você não tem muito o que fazer, isso pode meio que dar indicações do que você gostaria de ver que acontecesse, mas a parte de escalonamento, quando a Treads vai ser executada, quando ela vai ser parada, quando ela vai ser terminada, é tudo parte da JVM. E para que a gente tem, para que a gente utiliza Treads? Quando você tem um processador, nós vimos na última aula, geralmente o processador tem os núcleos, digamos, se você for que de novo um test manager, na parte de performance no Windows, você tem os núcleos e você tem os processadores lógicos, que geralmente é o dobro. No meu caso aqui, eu tenho quatro núcleos, que é um da quarta geração, e a gente tem processadores lógicos oito, ou seja, a gente tem oito Treads, que podem ser utilizadas paralelamente nesse caso. Todas essas outras Treads que nós temos aqui, são Treads virtuais, não são Treads consideradas Treads nativas. Então o Java, ele tem, ele trabalha, né, a gente pode trabalhar com Treads nativas também, tá fora do escopo desse curso, mas tem dois tipos de Treads, né, você tem as Treads do tipo Diamond e as Treads do tipo User. O que você precisa saber sobre as Treads do tipo Diamond User é que o Java, ele encerra o programa quando todas as Treads do tipo User são terminadas. Treads do tipo Diamond, elas não têm tanta prioridade, por exemplo, a Tread que toma conta do grava de collector, ou seja, que vai remover, limpar os objetos de memória, uma Treads do tipo Diamond. Ou seja, se aquela Treads estiver sendo executada e as Treads de User tiverem sido finalizadas, o programa vai acabar, independente dessa Tread estar oustando ou não, tá meio que descarta. E, como nós falamos, se você tem múltiplas Treads, algumas operações você consegue executar em paralelo, assim como nós vimos na última aula, ou Parallel Strings, aqui a gente vai fazer manualmente o processo de trabalhar com Treads. Então vamos para o mulato, primeira coisa, todas as Treads, né, todo o programa tem uma Treads e toda a Treads tem um homem. Como é que a gente vai pegar o nome da Tread? Tread.currentthread.getname. Quando você executa, você vai ver que o nome dessa Tread, que no caso que a gente está executando, é Mane, não é por causa do nome do método, mas é a Tread que executa, que inicia o programa no Java, é chamada de TreadMane. E aí, agora a gente vai ver como é que a gente pode criar uma Tread. Existem algumas formas, né, a primeira delas é você utilizando o tendeno, a... na classe Tread. Então, por exemplo, você pode criar uma classe qualquer, vamos chamar essa classe de Tread, exemplo, por falta de... Atividade, Tread, exemplo, ExtendTread. Esse aqui não é um modo muito indicado, porque quando você trabalha com herança, a gente está falando que a gente está especializando uma classe, na verdade, aqui a gente não está especializando a classe Tread. Vamos criar aqui 5-inchar-c e vamos criar um consultor. Ele não tem um consultor aqui, então eu vou criar aqui... Vamos criar aqui Public, Tread, exemplo, char-c, des.c, srbc. Beleza, por que eu estou criando esse char? Porque eu vou mostrar para vocês como é que funciona. E aí, você... Agora tem um objeto que é do tipo Tread, é um objeto Tread, exemplo, que passa no teste, é uma Tread, e o código que você quer que seja executado por Tread diferente, precisa ir no método. Então, se você apertar Ctrl-O, você tem esse método Run, que você precisa sobre escrever. E dentro desse método Run, é o código que você colocar que vai ser executado pela Tread separada. Então, por exemplo, vamos fazer um for aqui, for e de zero até mil. E o que eu quero fazer? Só quero imprimir esse c, mas eu vou fazer o seguinte, eu vou dar um break aqui, então se o meu i por cento 100 foi diferente de... Foi igual a zero, ou seja, se ele for múltiplo de 100, eu quero só dar um break line. Um códigozinho bem simples que eu quero mostrar para vocês a execução das treads. Bom, então, agora que nós temos esse exemplo, como é que a gente faz? A gente cria primeiro um objeto. Eu vou pegar esse código aqui e vou colocar, vou dar um Ctrl-X e vou colocar dentro do Run, ele que vai ser executado por Treads diferentes. E eu vou botar aqui um... Vou chamar, vou criar aqui TreadExample, vou chamar de T1, mil, TreadExample. E eu vou passar aqui, por exemplo, a... Vou trazer, contradê, contradê. Então, temos T1, T2, T3, T4. E nós temos A, B, T e D. Legal. Quando nós executarmos, se nós chamarmos assim, T1, ponto Run, T2, ponto Run, T3, ponto Run, T4, ponto Run, você não está executando em Treads diferentes. Então, você pode ver que o editor dá um warningzinho assim, e isso breve de seu start, que é o que nós vamos utilizar. Então, como você dá um Ctrl-T, você vai ver, remove o L e N daqui. Contrasta o F10. Então, o que você pode perceber aqui? Que ele começou com a Treads main, imprimiu A até o final. Em seguida, talvez a gente possa até diminuir isso aqui para 500. Um pouquinho mais fácil de usar. Então, você pode ver que ele imprimiu A com a Treads main, aí em seguida com a Treads main também, ele imprimiu B, depois que a Treads main imprimiu C, ou seja, a gente utilizou apenas uma Treads. Por quê? Porque a gente não deu um start. Então, você está trabalhando com múltiplas threads, em vez de você chamar Run, quando você chama Run, você fala, não, a Treads main executa o método Run do objeto T1. Mas aí, quando você dá um start, as coisas mudam. Por quê? Porque agora você está falando para o JVM de começar uma nova thread. Ou seja, todas as vezes que a Treads main chegar aqui nesse T1, a Treads main vai dar um start em uma outra thread. Então, vamos executar com o Shift F10. E aí, agora você pode ver que o resultado é bem malucão. Então, você pode ver, nós temos a Treads 0, nós temos a Treads 2, a sequência que a Treads vai ser executada também é o JVM que escolhe, você não tem por nenhum. Então, você pode ver que ele começou basicamente, ele chegou aqui, ele startou, aí ele startou a primeira thread 0, aí ele startou a thread 1, aí startou a thread 2, mas aí na hora de chamar na execução aqui foi a primeira thread 0 e depois a thread 2, depois ele imprimiu o CCCCC, depois ele passou para thread 1, aqui imprimiu BBBBBBBB, aí a thread 1 ainda, imprimindo CCCCC, aí depois foi para thread 3 e assim por diante, ou seja, ele fica trocando as threads, a partir do momento em que a gente começa a imprimir aqui, já não tem mais como saber quem está imprimindo, porque ele troca, ele começa a imprimir, imprime tipo 30 na thread 0, depois imprime mais 50 na thread 2, ou seja, você não tem como saber a ordem, se você executar isso aqui de novo com o Treads F10, você vai ver que a ordem já é completamente diferente, executar de novo com o Treads F10, a ordem também é diferente, ou seja, não tem garantia nenhuma de que o resultado vai ser sempre o mesmo. Então, meio que você está executando esse código em paralelo, mas a porcentagem de tempo que cada uma das testes vai ficar executando esse código é decidido pela JVM, não tem que você fazer muito para isso. Bom, e... vou fazer, vou colocar final aqui, vou tirar esse warning, e qual a outra forma que você tem de trabalhar com um Treads, é você implementando o interface Runable, então está o seguinte, vou querer clas, thread example Runable, e vou, em vez de estender thread, vou só implementar Runable, e na verdade faz muito mais sentido, porque é preciso falar que essa classe aqui, ela é um Runable e você precisa obrigatoriamente providenciar a implementação do método Run. Aí, vou copiar exatamente esse código aqui, você tem esse C, a gente pode copiar também que... para ver se esse C traz a example Runable. E aí, como é que a gente faz? Bom, a gente troca aqui um pouco a implementação, você pode segurar com a bolinha do mouse e block selection aqui, no Ctrl C, aí, vou comentar esse cara aqui, porque a gente faz o seguinte, a gente queria primeiro uma thread, um Tread, como já é Tread, T1, recebe new, aí, se você passar aqui, por exemplo, thread, exemplo Runable, você pode passar o cara que quer, vamos colocar aqui, você está vendo que tem um enrinho, falando que required type é Tread, mas o que nós provemos é Tread Runable. Se você for aqui no Tread, você tem implementos Runable, mas não tem que saber de que vai passar no Tread, então, você pega esse código aqui, encapsula dentro de um objeto Tread, que ele aceita, ele tem um constutor sobrecarregado que aceita um Runable. Aí, você passa aqui, dessa forma, então, Ctrl D, Ctrl D, Ctrl D, aí, você passa 2, 3, 4, mas dá o block selection aqui, então, só um Ctrl V, um. Agora, com o Shift F10, você tem exatamente, não o mesmo resultado, mas você pode ver que nós ainda estamos trabalhando com outras threads, mas dessa vez nós estamos utilizando interface, que é o G de recomendado de trabalhar com thread. Bom, então, é isso, uma pequena introdução sobre threads, na próxima aula nós vamos continuar com mais sópicos sobre threads. Vejo vocês lá, até mais. Pera, pera, pera, que eu acabei de ver aqui, que eu errei. Bom, agora você já viu que você pode passar um objeto do tipo Tread dentro do constutor, porque Tread, na verdade, é um Runable, por isso que aquele código funcionou. Então, você volta aqui e vê que Tread implementa Runable, na verdade o que a gente quer é esse cara aqui, o Ctrl C, aí você volta aqui, então, Ctrl V, Ctrl V, Ctrl V, Ctrl V, o código vai funcionar exatamente da mesma forma. Bom, então, agora sim, vejo vocês na próxima aula, até mais.

