A tal aba pra você, a primeira vista parece super simples. Na aba seguindo mostra só tweets de pessoas que eu sigo provavelmente em ordem cronológica. Fácil de fazer, um iniciante consegue imaginar um select top 100, asterisco, front tweets, order by, create a jet, desk da vida. Agora, no pra você tem tweets de gente que eu sigo e de gente que eu não sigo. Mas que as pessoas que eu sigo interagiram. Se eu sigo o João, e o João retuitou o tweet do Paulo, no meu pra você pode aparecer o tweet do Paulo. Só que não é tão simples assim. E se quem eu sigo interagiu com 100 tweets, quais deles deveriam aparecer pra mim? Das pessoas que eu sigo, quais delas são mais relevantes pra aparecer no topo primeiro? Porque eu vejo o like de algumas pessoas mas não de outras. Ah, será que como os postes de blog estavam tentando explicar é só botar um peso pra like, outro peso pra retweet e dar um group buy ou order buy da vida e pegar o topo? Também não. Como é impossível cobrir o código todo que foi liberado, eu escolhi começar falando só de um pequeno trecho. Um banco de dados no SQL de grafos que inclusive já tinha sido liberado antes como open source com licença à paixa chamado Graph.Jet e a história por trás dele. Tudo isso foi descrito num paper de autoria de Anish Sharma e vários outros colaboradores publicado em 2016. Pra todo mundo que não fez ciência da computação entender, na faculdade a gente aprende sobre um troço chamado Graphos. Na prática você já deve ter visto e até desenhado. É quando você desenha caixinhas ou círculos que chamamos de nós e ligamos um nó com outro nó com um troço que chamamos de vértices ou bordas. Podemos representar Graphos como matrizes adjacentes ou listas adjacentes. Outra forma de representar Graphos é com vetores. Daí podemos classificar Graphos baseados em características como número de nós ou número de vértices, edis ou bordas, direção das bordas e tem diversos tipos de Graphos como unidirecionais. Em Git por exemplo você já deve ter ouvido falar que é um DAG ou um Direct Acíclic Graph ou Graph Acíclico que não é cíclico e direto. Dado um Grapho temos como navegar de um nó pra outro nó. Pense em nós como uma casa numa rua e os vértices como o caminho talvez a rua entre essas casas. Algoritmos para navegar como o algoritmo do menor caminho entre dois nós que é o Hello World de Graphos. E não é só isso, ainda no assunto de classificação temos nós que ficam nas bordas do Grapho que tem poucos vértices e temos nós no meio dos Graphos com muitos vértices. Costumamos chamar esses nós de hubs. Na prática numa rede social chamamos de hubs mas pessoas comuns chamam de influencers e pessoas comuns são os nós das bordas com poucos relacionamentos ou vértices. Tudo na natureza pode ser representado com Graphos. Como eu falei antes evolução de desenvolvimento do software pode ser representado como um DAG, um Grapho de comits com branches. Um sistema de logística entregas é orientado num mapa com Graphos pra determinar o melhor caminho de entrega entre dois pontos. O DNA humano pode ser um Grapho onde os nós são as bases como a denina, citosina, goninitimina formando núcleo bases. As sinapses do nosso cérebro são Graphos. Num ecossistema animal temos a hierarquia da cadeia alimentar que pode ser representado como um Grapho. No mercado temos Graphos de empresas e relacionamentos de comprador e vendedor e assim por diante. No caso do Twitter que é uma rede social os nós costumam ser as pessoas e os vértices são os relacionamentos. Quem nós seguimos, quem damos likes ou retweets, quem bloqueamos e assim por diante. Se você nunca estudou ciência da computação vai ter um pouco de dificuldade de entender o que eu vou explicar e certamente não vai entender nada do código do Twitter. Eu vou tentar simplificar o máximo que der mas eu só consigo chegar até certo ponto. Então se interessa em depois e procurar cursos como nas aulas do MIT sobre Graphos. Pra operar em Graphos você vai precisar aprender coisas como álgebra linear e cálculo, pelo menos o cálculo básico. E portanto sim pra entender como uma rede social funciona e o código por trás precisa entender esses aspectos da matemática. E pra chegar no ponto de recomendação também precisa entender o básico de estatística e probabilidade porque recomendação é justamente a probabilidade dos tweets que o sistema recomendar realmente te interessar a ponto de engajar da like ou reply que é a base de machine learning. Mesmo se você não foi implementado o zero, inteligência artificial, machine learning, ainda assim precisa entender essa matemática. Machine learning é nada mais nada menos do que uma coleção de algoritmos de classificação e probabilidade. Se não souber quando pode usar regressão linear, regressão logística, similaridade de cosseno, base engino, não vai saber o que fazer. Cada caso, cada tipo de conjunto de dados e o resultado que quer depende de saber escolher quais desses algoritmos usar e pra saber quais usar precisa saber a matemática por trás. Você pode usar regressão linear quando não podia e ter resultados errados, que é a coisa mais comum de ver a amador fazer. Nem tudo que parece uma reta é uma reta.
